一、数据定义语言（DDL）

| 语法               | 用途          
| ----------------- | ----------- 
| `CREATE DATABASE` | 创建数据库       
| `DROP DATABASE`   | 删除数据库       
| `CREATE TABLE`    | 创建表         
| `DROP TABLE`      | 删除表         
| `ALTER TABLE`     | 修改表结构（添加列等） 
| `RENAME TABLE`    | 重命名表        
| `TRUNCATE TABLE`  | 快速清空表       
| `CREATE VIEW`     | 创建视图        
| `DROP VIEW`       | 删除视图        
| `CREATE INDEX`    | 创建索引        
| `DROP INDEX`      | 删除索引        



二、数据操作语言（DML）

| 语法       | 用途             
| --------- | -------------- 
| `SELECT`  | 查询数据           
| `INSERT`  | 插入新数据          
| `UPDATE`  | 更新已存在的数据       
| `DELETE`  | 删除数据           
| `REPLACE` | 插入或更新（MySQL特有） 



三、数据控制语言（DCL）

| 语法            | 用途       
| -------------- | ---------- 
| `GRANT`        | 授予权限    
| `REVOKE`       | 撤销权限    
| `CREATE USER`  | 创建用户    
| `DROP USER`    | 删除用户    
| `SET PASSWORD` | 设置用户密码 



四、事务控制语言（TCL）

| 语法                 | 用途                                
| ------------------- | ----------------------------------- 
| `BEGIN`             | 开始事务（也可用 `START TRANSACTION`） 
| `COMMIT`            | 提交事务                             
| `ROLLBACK`          | 回滚事务                             
| `SAVEPOINT`         | 创建保存点                            
| `RELEASE SAVEPOINT` | 释放保存点                            
| `SET AUTOCOMMIT`    | 开启/关闭自动提交                     



五、查询语法（SELECT 相关）

| 关键字/结构                 | 用途             
| ------------------------- | --------------- 
| `SELECT`                  | 指定要查询的列     
| `FROM`                    | 指定数据源表      
| `WHERE`                   | 行过滤条件        
| `GROUP BY`                | 分组             
| `HAVING`                  | 分组后的条件过滤   
| `ORDER BY`                | 排序             
| `LIMIT`                   | 限制返回记录数    
| `DISTINCT`                | 去重             
| `AS`                      | 别名             
| `IN` / `NOT IN`           | 是否属于集合      
| `BETWEEN`                 | 范围查询         
| `LIKE` / `NOT LIKE`       | 模糊匹配         
| `IS NULL`                 | 判断是否为空      
| `EXISTS`                  | 是否存在子查询结果 
| `CASE WHEN THEN ELSE END` | 条件分支语句      



六、连接（JOIN）

| 类型          | 用途             
| ------------ | -------------- 
| `INNER JOIN` | 取两表匹配的记录       
| `LEFT JOIN`  | 取左表所有记录（右表可空）  
| `RIGHT JOIN` | 取右表所有记录（左表可空）  
| `FULL JOIN`  | 所有记录（MySQL不支持） 
| `CROSS JOIN` | 笛卡尔积           
| `SELF JOIN`  | 自连接            



八、聚合函数

| 函数              | 说明           
| ---------------- | ------------ 
| `COUNT()`        | 计数           
| `SUM()`          | 求和           
| `AVG()`          | 平均值          
| `MAX()`          | 最大值          
| `MIN()`          | 最小值          
| `GROUP_CONCAT()` | 字符串连接（MySQL） 



九、数学与字符串函数（常见）

| 类型    | 示例                                                 
| ------ | -------------------------------------------------- 
| 字符串  | `CONCAT()`, `SUBSTRING()`, `REPLACE()`, `LENGTH()` 
| 数学    | `ABS()`, `ROUND()`, `CEIL()`, `FLOOR()`, `MOD()`   
| 日期时间 | `NOW()`, `CURDATE()`, `DATE_ADD()`, `DATEDIFF()`   
| 类型转换 | `CAST(expr AS type)`, `CONVERT(expr, type)`        



十、其他语法（高级）

| 语法                   | 说明            
| --------------------- | ------------- 
| `WITH`（CTE）          | 公共表达式，便于重用子查询 
| `EXPLAIN`             | 分析 SQL 执行计划   
| `PREPARE` / `EXECUTE` | 预编译语句支持       
| `LOAD DATA INFILE`    | 批量导入数据        
| `SELECT INTO OUTFILE` | 导出查询结果到文件     



****************************************************************************************************************************


MySQL 事务

一般来说，事务是必须满足4个条件（ACID）

原子性（Atomicity，或称不可分割性）
    一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。
    事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。

一致性（Consistency）
    在事务开始之前和事务结束以后，数据库的完整性没有被破坏。
    这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。

隔离性（Isolation，又称独立性）
    数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。
    事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。

持久性（Durability）。 
    事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。



**************************************************************************************************************************

MySQL 执行原理

客户端
   ↓
连接层（Connection Layer）
   ↓
查询处理层（SQL Layer：解析器、优化器、执行器）
   ↓
存储引擎层（Storage Engine）
   ↓
物理存储层（文件系统/磁盘）



 一、连接管理（Connection Layer）

    客户端连接到 MySQL，MySQL 使用 连接管理器 来处理这个连接。

    验证用户名、密码，检查用户权限。

    如果验证通过，则建立会话（Session），准备接收 SQL。



 二、查询处理层（SQL Layer）
（1）查询解析（Parsing）

    词法分析（Lexical Analysis）： 将 SQL 字符串拆解为“关键字”、“标识符”等 token。

    语法分析（Syntax Analysis）： 根据 SQL 语法规则生成语法树（Parse Tree）。

    语义分析（Semantic Analysis）： 检查表是否存在、列名是否正确、类型是否匹配等。

（2）查询优化（Optimizer）

    逻辑优化： 例如将 WHERE 1=1 去除，常量表达式提前计算。

    物理优化： 选择最优的索引、JOIN 顺序等。

    生成 执行计划（Execution Plan）：例如选择全表扫描或使用索引。

（3）查询执行（Executor）

    执行器根据执行计划一步步访问数据。

    调用下层 存储引擎 来获取数据。

    将结果逐行传回客户端。



 三、存储引擎层（Storage Engine）
 | 存储引擎   | 特点                        
 | -------- | --------------------------- 
 | InnoDB   | 支持事务、行级锁、外键，默认引擎 
 | MyISAM   | 支持全文索引，读多写少的场景    
 | MEMORY   | 数据存在内存中，速度快但不持久   



 四、物理存储层

 存储引擎最终会将数据读写到：

    磁盘文件（如 .ibd, .frm, .MYD, .MYI）

    页（Page）、块（Block）等数据结构

    使用缓存机制（如 Buffer Pool）提高效率




**************************************************************************************************************************

SQL 查询的执行顺序（逻辑顺序）

| 步骤 | 子句       | 说明                                               
| --- | ---------- | ------------------------------------------------- 
|  1  | `FROM`     | 指定数据源表，执行连接操作（JOIN）等。                  
|  2  | `ON`       | 指定 JOIN 条件（若有 JOIN）。                         
|  3  | `JOIN`     | 执行表连接，产生中间结果集。                           
|  4  | `WHERE`    | 对 `FROM` 或 JOIN 后的结果进行行过滤（不能用聚合函数）。  
|  5  | `GROUP BY` | 根据字段进行分组。                                   
|  6  | `HAVING`   | 对分组结果进行条件过滤（可以使用聚合函数，如 COUNT, SUM）。
|  7  | `SELECT`   | 指定要返回的列和表达式，可以包含聚合函数。               
|  8  | `DISTINCT` | 对 `SELECT` 结果去重。                              
|  9  | `ORDER BY` | 对结果排序（可使用别名、列号、表达式）。                 
| 10  | `LIMIT`    | 限制返回结果的数量。                                 
